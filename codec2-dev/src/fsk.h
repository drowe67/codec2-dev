/*---------------------------------------------------------------------------*\

  FILE........: fsk.h
  AUTHOR......: Brady O'Brien
  DATE CREATED: 6 January 2016

  C Implementation of 2FSK modulator/demodulator, based on octave/fsk_horus.m

\*---------------------------------------------------------------------------*/

/*
  Copyright (C) 2016 David Rowe

  All rights reserved.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License version 2.1, as
  published by the Free Software Foundation.  This program is
  distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
  License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this program; if not, see <http://www.gnu.org/licenses/>.
*/


#ifndef __C2FSK_H
#define __C2FSK_H
#include <stdint.h>
#include "comp.h"
#include "kiss_fftr.h"

struct FSK {
    /*  Static parameters set up by fsk_init */
    int Ndft;               /* buffer size for freq offset est fft */
    int Fs;                 /* sample freq */
    int N;                  /* processing buffer size */
    int Rs;                 /* symbol rate */
    int Ts;                 /* samples per symbol */
    int Nmem;               /* size of extra mem for timing adj */
    int P;                  /* oversample rate for timing est/adj */
    int Nsym;               /* Number of symbols spat out in a processing frame */
    int f1_tx;              /* f1 for modulator */
    int f2_tx;              /* f2 for modulator */
    
    /*  Parameters used by demod */
    float phi1_d;           /* f1 oscillator for demod */
    float phi2_d;           /* f2 oscillator for demod */
    COMP phi1_c;
    COMP phi2_c;
    kiss_fftr_cfg fft_cfg;  /* Config for KISS FFT, used in freq est */
    float norm_rx_timing;   /* Normalized RX timing */
    
    float *samp_old;        /* Ass end of last batch of samples */
    int nstash;             /* How many elements are in there */
    
    /* Memory used by demod but not important between demod frames */
    
    /*  Parameters used by mod */
    float tx_phase;         /* phase of modulator */
    COMP tx_phase_c;        /* TX phase, but complex */ 
    
    /*  Statistics generated by demod */
    float EbNodB;           /* Estimated EbNo in dB */
    float f1_est;             /* Estimated f1 freq. */
    float f2_est;             /* Estimated f2 freq. */
    
    /*  Parameters used by mod/demod and driving code */
    int nin;                /* Number of samples to feed the next demod cycle */
    
};

struct FSK * fsk_create(int Fs, int Rs, int tx_f1, int tx_f2);
void fsk_destroy(struct FSK *fsk);

void fsk_mod(struct FSK *fsk, 
             float fsk_out[],   /* N float output modulated FSK samples */
             uint8_t tx_bits[]  /* Nsym unpacked input bits in LSB  */
             );

/* number of input samples required for next call to fsk_demod() */

uint32_t fsk_nin(struct FSK *fsk);

void fsk_demod(struct FSK *fsk, 
               uint8_t rx_bits[],     /* Nsym unpacked output demodulated rx bits in each LSB */
               float fsk_in[]         /* N input float modulated FSK samples */
               );



#endif
